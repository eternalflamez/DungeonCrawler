//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
	public class ObjectController : MonoBehaviour
	{
		private float timeLastSpell = 0;
		private float spellDelay = .5f;
		private List<Spell> spells;
		List<Spell> toRemove = new List<Spell>();

		public ObjectController ()
		{
			spells = new List<Spell>();
		}

		private void addObject(Spell p)
		{
			spells.Add(p);
		}

		public void moveAllObjects()
		{
			foreach (Spell item in spells) 
			{
				float speed = item.getSpeed();
				float moved = item.getDistanceMoved();
				float distance = item.getDistance();
				float distanceMoved = speed * Time.deltaTime;
				GameObject particle = item.getObject();

				particle.transform.position += speed * particle.transform.forward * Time.deltaTime;

				item.setDistance(distanceMoved);

				moved += distanceMoved;
				
				Debug.Log (moved);
				
				if(moved >= distance)
				{
					toRemove.Add(item);
				}
			}

			for(int i = 0; i < toRemove.Count; i++)
			{
				spells.Remove (toRemove[i] );
			}
		}

		public List<Spell> getFinishedObjects()
		{
			return toRemove;
		}

		public void updateTimer(float deltaTime)
		{
			timeLastSpell += deltaTime;
		}

		public void Cast(string spellName)
		{
			if(timeLastSpell > spellDelay)
			{
				Spell spell = new Spell_Fireball(); // Default value.
				bool cast = true; // Won't be cast if the spellname isn't recognised.
				int positionAdjustment = 1; // How far the object is placed forward (in front of the player)

				switch (spellName) 
				{
					case "Fireball":
						spell = new Spell_Fireball();
						break;
					case "Frost Ray":
						spell = new Spell_ElectricBall();
						positionAdjustment = 2;
						break;

					default:
						cast = false;
							break;
				}

				if(cast)
				{
					addObject(spell);
					GameObject spellObj = Instantiate(spell.getObject(), Camera.main.transform.position, Camera.main.transform.rotation) as GameObject;
					spellObj.transform.position += spellObj.transform.forward * positionAdjustment;
					spellObj.tag = "Spell";
					spell.setObject(spellObj);

					timeLastSpell = 0;
				}
			}
		}
	}
}