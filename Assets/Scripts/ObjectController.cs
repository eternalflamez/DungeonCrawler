//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
	public class ObjectController : MonoBehaviour
	{
		private float timeLastSpell = 0;
		private float spellDelay = .5f;
		private List<Spell> spells;
		List<Spell> toRemove = new List<Spell>();

		public ObjectController ()
		{
			spells = new List<Spell>();
		}

		private void addObject(Spell p)
		{
			spells.Add(p);
		}

		public void moveAllObjects()
		{
			foreach (Spell item in spells) 
			{
				if(item.getObject().tag == "UsedSpell")
				{
					toRemove.Add(item);
				}
				else
				{
					float speed = item.getSpeed();
					float moved = item.getDistanceMoved();
					float distance = item.getDistance();
					float distanceMoved = speed * Time.deltaTime;
					GameObject particle = item.getObject();

					particle.transform.position += speed * item.getDirection() * Time.deltaTime;

					item.setDistance(distanceMoved);

					moved += distanceMoved;
					
					if(moved >= distance)
					{
						toRemove.Add(item);
					}
				}
			}

			for(int i = 0; i < toRemove.Count; i++)
			{
				spells.Remove (toRemove[i] );
			}
		}

		public List<Spell> getFinishedObjects()
		{
			return toRemove;
		}

		public void updateTimer(float deltaTime)
		{
			timeLastSpell += deltaTime;
		}

		public void Cast(string spellName)
		{
			if(timeLastSpell > spellDelay)
			{
				Spell spell; // Default value.
				int positionAdjustment = 1; // How far the object is placed forward (in front of the player)
				int rotation = 0;
                string particleName = "";

				switch (spellName) 
				{
					case "Fireball":
						spell = new Spell_Fireball();
						rotation = 90;
                        particleName = "FireWall";
						break;

                    case "FrostOrb":
                        spell = new Spell_FrostOrb();
                        particleName = "mobFrozen";
                        break;

					default:
                        return;
				}

				addObject(spell);
                GameObject spellObj = Instantiate(spell.getObject(), this.transform.position, this.transform.rotation) as GameObject;
				spellObj.transform.position += spellObj.transform.forward * positionAdjustment;

                String damageString = spell.getDamage().ToString();

                spellObj.name = damageString + "/" + spell.getElement().ToString();
				spellObj.tag = "Spell";
                spellObj.AddComponent("WallDetector");
				spell.setDirection (this.transform.forward);

				spellObj.transform.Rotate(rotation, 0, 0);
				spell.setObject(spellObj);

                spellObj.SendMessage("setSpeed", spell.getSpeed());
                spellObj.SendMessage("setDirection", spell.getDirection());
                spellObj.SendMessage("setParticles", particleName);

				timeLastSpell = 0;
			}
		}
	}
}