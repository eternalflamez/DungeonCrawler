//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp
{
	public abstract class Spell
	{
		/// <summary>
		/// The object to throw.
		/// </summary>
		public GameObject visuals;

		/// <summary>
		/// The level of the spell.
		/// </summary>
		protected int level;

		/// <summary>
		/// The damage of the spell.
		/// </summary>
		protected float damage;

		/// <summary>
		/// The spell distance.
		/// </summary>
		protected float spellDistance;

		/// <summary>
		/// The description of the pattern.
		/// </summary>
		protected string patroon;

		/// <summary>
		/// The experience.
		/// </summary>
		protected int experience;

		protected Vector3 direction;

		/// <summary>
		/// The particle.
		/// </summary>
		protected SpellParticle particle;

		public Spell (int level, float damage, float spellDistance, string patroon, float speed)
		{
			this.level = level;
			this.damage = damage;
			this.spellDistance = spellDistance;
			this.patroon = patroon;
			experience = 0;
		}

		protected void LevelUp(/* Later: opties toevoegen voor de levelup */)
		{
			damage *= 1.1f;
			spellDistance += 2;
			level += 1;
			experience = 0;
		}

		public void GainExp()
		{
			experience += 5;

			if(experience == 100 * level)
			{
				LevelUp();
			}
		}

		public GameObject getObject()
		{
			return particle.getParticle();
		}

		public void setObject(GameObject go)
		{
			particle.setParticle(go);
		}

		public float getDistance()
		{
			return particle.getDistance();
		}
		
		public float getSpeed()
		{
			return particle.getSpeed();
		}

		public void setDirection(Vector3 d)
		{
			this.direction = d;
		}

		public Vector3 getDirection()
		{
			return this.direction;
		}

		public float getDistanceMoved()
		{
			return particle.getDistanceMoved();
		}

		public void setDistance(float distance)
		{
			particle.setMoved(distance);
		}

		public float getDamage()
		{
			return this.damage;
		}
	}
}

